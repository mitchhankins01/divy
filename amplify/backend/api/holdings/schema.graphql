type AutoCompleteSymbolType {
  exchange: String
  shortname: String
  quoteType: String
  symbol: String
  index: String
  score: String
  typeDisp: String
  longname: String
  label: String
}

type ImportHoldingsFail {
  id: String!
  symbol: String!
  reason: String!
}

type ImportHoldingsNew {
  id: String!
  symbol: String!
  numberOfShares: Float!
  pricePerShare: Float!
  comments: String!
}

type ImportHoldingsUpdate {
  id: String!
  symbol: String!
  numberOfShares: Float!
  pricePerShare: Float!
  reason: String!
}

type ImportHoldingsResponse {
  failSymbols: [ImportHoldingsFail]
  newSymbols: [ImportHoldingsNew]
  updateSymbols: [ImportHoldingsUpdate]
}

type Query {
  listDividends: String! @function(name: "dividendsFunction-${env}")
  listStatistics: String! @function(name: "statisticsFunction-${env}")
  querySymbol(symbol: String!): [AutoCompleteSymbolType]! @function(name: "querySymbolFunction-${env}")
  importHoldings(type: String!, fileKey: String!, existingSymbols: String): ImportHoldingsResponse! @function(name: "importHoldingsFunction-${env}")
}

type Holding @model
  @key(name: "holdingsByOwner", fields: ["owner"], queryField: "holdingsByOwner")
  @auth(
    rules: [
        { allow: owner }
        { allow: private, provider: iam, operations: [read, create, update, delete] }
      ]
  ) {
    id: ID!
    symbol: String!
    price: Float!
    quantity: Float!
    comments: String!
    owner: String!
}

type StripeEvent @model @auth(rules: [{ allow: groups, groups: ["Admin"] }]) {
    id: ID!
    type: String!
    message: String!
}
